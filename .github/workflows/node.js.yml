# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: editor-ui 言語ファイルのパッケージ化

on:
  schedule:
  - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
    - name: Get latest GitHub release version
      id: latest_release
      run: |
        echo "🔍 Getting latest GitHub release version..."
        LATEST_VERSION=$(curl -s https://api.github.com/repos/n8n-io/n8n/releases/latest | jq -r '.tag_name')
        echo "✅ Latest release tag: $LATEST_VERSION"
        echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT

    - name: Checkout local
      uses: actions/checkout@v4
      with:
        path: ./n8n-i18n-japanese

    - name: Check if tag exists
      id: check_tag
      run: |
        TAG="${{ steps.latest_release.outputs.latest }}"
        echo "🔍 Checking for remote tag: $TAG"
        if git ls-remote --tags origin | grep "refs/tags/$TAG$"; then
          echo "⚠️ Tag $TAG already exists. Stopping workflow."
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Tag $TAG does not exist. Proceeding with build."
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      working-directory: /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese

    - name: Exit if tags exist
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "⏹️ Tags exist, stopping workflow."
        exit 0

    - name: Checkout n8n
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/checkout@v4
      with:
        repository: n8n-io/n8n
        ref: ${{ steps.latest_release.outputs.latest }}
        path: ./n8n

    - name: Setup Node.js
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/setup-node@v4.2.0
      with:
        node-version: 22.x

    - name: Verify Node.js version
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔍 Checking Node.js setup..."
        NODE_VERSION=$(node --version | cut -d'.' -f1 | cut -d'v' -f2)
        echo "📋 Current Node.js version: $(node --version)"
        if [ "$NODE_VERSION" -lt 20 ]; then
          echo "❌ Node.js version 20 or later is required. Current version: $(node --version)"
          exit 1
        fi
        echo "✅ Node.js version check passed"

    - name: Setup corepack and pnpm
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔧 Setting up corepack and pnpm..."
        npm i -g corepack@0.31
        corepack enable
        echo "✅ Corepack and pnpm setup completed"

    - name: Optimize pnpm configuration
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔧 Optimizing pnpm configuration..."
        pnpm config set network-timeout 300000
        pnpm config set fetch-retries 5
        pnpm config set fetch-retry-factor 2
        pnpm config set fetch-retry-mintimeout 10000
        pnpm config set fetch-retry-maxtimeout 60000
        echo "✅ pnpm configuration optimized"
      working-directory: /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n

    - name: Install dependencies with retry
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "📦 Installing dependencies with retry mechanism..."
        for i in {1..3}; do
          echo "🔄 Attempt $i to install dependencies..."
          if pnpm install --frozen-lockfile; then
            echo "✅ Dependencies installed successfully on attempt $i"
            break
          else
            echo "⚠️ Installation failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "❌ Failed to install dependencies after 3 attempts"
              exit 1
            fi
            echo "⏳ Waiting 30 seconds before next attempt..."
            sleep 30
          fi
        done
      working-directory: /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n

    - name: Build packages in dependency order
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔧 Building packages in correct dependency order: @n8n/di → @n8n/config → n8n-workflow..."
        
        # 1. @n8n/diパッケージのビルド（@n8n/configの依存関係）
        echo "🔧 Building @n8n/di package (required for @n8n/config)..."
        DI_DIR="/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n/packages/@n8n/di"
        if [ -d "$DI_DIR" ]; then
          cd "$DI_DIR"
          
          echo "📝 Updating tsconfig.json for @n8n/di..."
          if [ -f "tsconfig.json" ] && ! grep -q '"moduleResolution"' tsconfig.json; then
            # compilerOptionsセクション内でmoduleResolutionを追加
            if grep -q '"baseUrl"' tsconfig.json; then
              sed -i '/\"baseUrl\":/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            elif grep -q '"rootDir"' tsconfig.json; then
              sed -i '/\"rootDir\":/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            fi
            echo "✅ Added moduleResolution: bundler to @n8n/di tsconfig.json"
          else
            echo "📝 moduleResolution already exists or tsconfig.json not found"
          fi
          
          echo "🏗️ Building @n8n/di package..."
          pnpm install --frozen-lockfile
          
          if [ -f "tsconfig.build.json" ]; then
            if command -v npx &> /dev/null; then
              npx tsc -p tsconfig.build.json
            else
              pnpm build
            fi
          else
            pnpm build
          fi
          
          if [ -d "dist" ]; then
            echo "✅ @n8n/di build completed successfully"
          else
            echo "❌ @n8n/di build failed - dist directory not found"
            exit 1
          fi
        else
          echo "⚠️ @n8n/di directory not found, skipping..."
        fi
        
        # 2. @n8n/configパッケージのビルド（n8n-workflowの依存関係）
        echo "🔧 Building @n8n/config package (required for n8n-workflow)..."
        CONFIG_DIR="/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n/packages/@n8n/config"
        if [ -d "$CONFIG_DIR" ]; then
          cd "$CONFIG_DIR"
          
          echo "📝 Updating tsconfig.json for @n8n/config..."
          if [ -f "tsconfig.json" ] && ! grep -q '"moduleResolution"' tsconfig.json; then
            # compilerOptionsセクション内でmoduleResolutionを追加
            if grep -q '"baseUrl"' tsconfig.json; then
              sed -i '/\"baseUrl\":/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            elif grep -q '"rootDir"' tsconfig.json; then
              sed -i '/\"rootDir\":/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            fi
            echo "✅ Added moduleResolution: bundler to @n8n/config tsconfig.json"
          else
            echo "📝 moduleResolution already exists or tsconfig.json not found"
          fi
          
          echo "🏗️ Building @n8n/config package..."
          pnpm install --frozen-lockfile
          
          if [ -f "tsconfig.build.json" ]; then
            if command -v npx &> /dev/null; then
              npx tsc -p tsconfig.build.json
            else
              pnpm build
            fi
          else
            pnpm build
          fi
          
          if [ -d "dist" ]; then
            echo "✅ @n8n/config build completed successfully"
          else
            echo "❌ @n8n/config build failed - dist directory not found"
            exit 1
          fi
        else
          echo "❌ @n8n/config directory not found: $CONFIG_DIR"
          exit 1
        fi
        
        # 3. n8n-workflowパッケージのビルド（他のパッケージの依存関係として必要）
        echo "🔧 Building n8n-workflow package (required for all other packages)..."
        WORKFLOW_DIR="/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n/packages/workflow"
        if [ -d "$WORKFLOW_DIR" ]; then
          cd "$WORKFLOW_DIR"
          
          echo "📝 Updating tsconfig.json for n8n-workflow..."
          if [ -f "tsconfig.json" ] && ! grep -q '"moduleResolution"' tsconfig.json; then
            # compilerOptionsセクション内でmoduleResolutionを追加
            if grep -q '"baseUrl"' tsconfig.json; then
              sed -i '/\"baseUrl\":/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            elif grep -q '"rootDir"' tsconfig.json; then
              sed -i '/\"rootDir\":/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            fi
            echo "✅ Added moduleResolution: bundler to n8n-workflow tsconfig.json"
          else
            echo "📝 moduleResolution already exists or tsconfig.json not found"
          fi
          
          echo "🏗️ Building n8n-workflow package..."
          # 依存関係の再確認
          pnpm install --frozen-lockfile
          
          # 複数のビルド方法を試行
          if [ -f "tsconfig.build.json" ]; then
            echo "📝 Building with tsconfig.build.json..."
            if command -v npx &> /dev/null; then
              npx tsc -p tsconfig.build.json
            else
              pnpm exec tsc -p tsconfig.build.json
            fi
          elif [ -f "package.json" ] && grep -q '"build"' package.json; then
            echo "📝 Building with pnpm build..."
            pnpm build
          else
            echo "📝 Building with direct TypeScript compilation..."
            if command -v npx &> /dev/null; then
              npx tsc
            else
              pnpm exec tsc
            fi
          fi
          
          if [ -d "dist" ]; then
            echo "✅ n8n-workflow build completed successfully"
          else
            echo "❌ n8n-workflow build failed - dist directory not found"
            exit 1
          fi
        else
          echo "❌ n8n-workflow directory not found: $WORKFLOW_DIR"
          exit 1
        fi
      working-directory: /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n

    - name: Build essential @n8n packages in correct order
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔧 Building essential @n8n packages in correct dependency order..."
        cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
        
        # 必要な@n8nパッケージのリスト（依存関係順）
        PACKAGES=(
          "@n8n/di"
          "@n8n/config" 
          "@n8n/constants"
          "@n8n/backend-common"
          "@n8n/vitest-config"
          "@n8n/eslint-config"
          "@n8n/tsconfig"
        )
        
        for package in "${PACKAGES[@]}"; do
          echo "🏗️ Building package: $package"
          
          # パッケージディレクトリを探す
          package_path=""
          if [ -d "packages/@n8n/${package#@n8n/}" ]; then
            package_path="packages/@n8n/${package#@n8n/}"
          elif [ -d "packages/${package#@n8n/}" ]; then
            package_path="packages/${package#@n8n/}"
          fi
          
          if [ -n "$package_path" ] && [ -d "$package_path" ]; then
            cd "$package_path"
            echo "📁 Building in directory: $package_path"
            
            # 依存関係の確認
            pnpm install --frozen-lockfile 2>/dev/null || true
            
            # ビルド実行
            if [ -f "tsconfig.build.json" ]; then
              if command -v npx &> /dev/null; then
                npx tsc -p tsconfig.build.json 2>/dev/null || echo "⚠️ TypeScript build had warnings for $package"
              else
                pnpm exec tsc -p tsconfig.build.json 2>/dev/null || echo "⚠️ TypeScript build had warnings for $package"
              fi
            elif [ -f "package.json" ] && grep -q '"build"' package.json; then
              pnpm build 2>/dev/null || echo "⚠️ pnpm build had warnings for $package"
            else
              echo "ℹ️ No build configuration found for $package, skipping..."
            fi
            
            cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
            echo "✅ Completed processing $package"
          else
            echo "⚠️ Package $package not found, skipping..."
          fi
        done
        
        echo "✅ Essential @n8n packages build completed"

    - name: Comprehensive TypeScript configuration fixes
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔧 Applying comprehensive TypeScript configuration fixes for Vite 6.x..."
        cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
        
        # @n8n/*パッケージのTypeScript設定を修正
        find packages -name "tsconfig.json" -type f | while read -r tsconfig_file; do
          if [ -f "$tsconfig_file" ] && ! grep -q '"moduleResolution"' "$tsconfig_file"; then
            echo "📝 Updating $tsconfig_file..."
            
            # compilerOptionsセクション内で適切な場所にmoduleResolutionを追加
            if grep -q '"compilerOptions"' "$tsconfig_file"; then
              # targetまたはmoduleの後にmoduleResolutionを追加
              if grep -q '"target"' "$tsconfig_file"; then
                sed -i '/\"target\":/a\\t\t\"moduleResolution\": \"bundler\",' "$tsconfig_file"
              elif grep -q '"module"' "$tsconfig_file"; then
                sed -i '/\"module\":/a\\t\t\"moduleResolution\": \"bundler\",' "$tsconfig_file"
              elif grep -q '"lib"' "$tsconfig_file"; then
                sed -i '/\"lib\":/a\\t\t\"moduleResolution\": \"bundler\",' "$tsconfig_file"
              else
                # compilerOptionsの最初に追加
                sed -i '/\"compilerOptions\": {/a\\t\t\"moduleResolution\": \"bundler\",' "$tsconfig_file"
              fi
              echo "✅ Updated $tsconfig_file"
            fi
          fi
        done
        
        echo "✅ TypeScript configuration fixes completed"

    - name: Check n8n editor-ui directory structure
      id: editorui_dir
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔍 Checking editor-ui directory structure..."
        NEW_DIR_PATH="/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n/packages/frontend/editor-ui"
        OLD_DIR_PATH="/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n/packages/editor-ui"

        if [ -d "$NEW_DIR_PATH" ]; then
          echo "✅ Using new editor-ui structure: $NEW_DIR_PATH"
          echo "flag=new" >> $GITHUB_OUTPUT
          echo "dir=$NEW_DIR_PATH" >> $GITHUB_OUTPUT
        else
          echo "✅ Using old editor-ui structure: $OLD_DIR_PATH"
          echo "flag=old" >> $GITHUB_OUTPUT
          echo "dir=$OLD_DIR_PATH" >> $GITHUB_OUTPUT
        fi

    - name: Move i18n language files
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "📁 Moving i18n language files..."
        I18N_LOCALES_DIR="/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n/packages/frontend/@n8n/i18n/src/locales"
        if [ -d "$I18N_LOCALES_DIR" ]; then
          cp -r /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/languages/* "$I18N_LOCALES_DIR/"
          echo "✅ Language files copied to new i18n structure: $I18N_LOCALES_DIR"
        else
          echo "❌ i18n locales directory not found: $I18N_LOCALES_DIR"
          exit 1
        fi

    - name: Apply patches
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔧 Applying patches..."
        cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
        if [ "${{ steps.editorui_dir.outputs.flag }}" = "new" ]; then
          if [ -f "/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/fix_editor-ui.patch" ]; then
            git apply /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/fix_editor-ui.patch
            echo "✅ Applied new editor-ui patch"
          fi
        else
          if [ -f "/home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/fix_editor-ui.old.patch" ]; then
            git apply /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/fix_editor-ui.old.patch
            echo "✅ Applied old editor-ui patch"
          fi
        fi

    - name: Build workspace with dependency resolution
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🏗️ Building entire workspace to resolve all @n8n/* dependencies..."
        cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
        
        # 依存関係の再確認とインストール
        echo "📦 Re-verifying and installing dependencies..."
        pnpm install --frozen-lockfile
        
        echo "🔧 Building all packages using workspace build..."
        # まず基本的なパッケージをビルド
        if [ -d "packages/core" ]; then
          echo "🏗️ Building core package..."
          cd packages/core
          pnpm install --frozen-lockfile 2>/dev/null || true
          if [ -f "tsconfig.build.json" ]; then
            npx tsc -p tsconfig.build.json 2>/dev/null || echo "⚠️ Core build had warnings"
          else
            pnpm build 2>/dev/null || echo "⚠️ Core build had warnings"
          fi
          cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
        fi
        
        # frontend関連パッケージのビルド
        FRONTEND_PACKAGES=(
          "packages/frontend/@n8n/i18n"
          "packages/frontend/@n8n/stores" 
          "packages/frontend/@n8n/rest-api-client"
        )
        
        for pkg in "${FRONTEND_PACKAGES[@]}"; do
          if [ -d "$pkg" ]; then
            echo "🏗️ Building $pkg..."
            cd "$pkg"
            pnpm install --frozen-lockfile 2>/dev/null || true
            
            # TypeScript設定の修正
            if [ -f "tsconfig.json" ] && ! grep -q '"moduleResolution"' tsconfig.json; then
              if grep -q '"isolatedModules": true[^,]' tsconfig.json; then
                sed -i 's/"isolatedModules": true/"isolatedModules": true,/' tsconfig.json
              fi
              sed -i '/\"isolatedModules\": true,/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
            fi
            
            # ビルド実行
            if command -v npx &> /dev/null; then
              npx tsup --no-dts 2>/dev/null || pnpm build 2>/dev/null || echo "⚠️ Build had warnings for $pkg"
            else
              pnpm build 2>/dev/null || echo "⚠️ Build had warnings for $pkg"
            fi
            
            cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
            echo "✅ Completed building $pkg"
          fi
        done
        
        echo "✅ Workspace build completed successfully"

    - name: Verify essential package builds
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🔍 Verifying essential package builds..."
        cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
        
        # 重要なパッケージのdistディレクトリを確認
        CRITICAL_PACKAGES=(
          "packages/workflow"
          "packages/frontend/@n8n/i18n"
          "packages/frontend/@n8n/stores"
          "packages/frontend/@n8n/rest-api-client"
        )
        
        for package_dir in "${CRITICAL_PACKAGES[@]}"; do
          if [ -d "$package_dir/dist" ]; then
            echo "✅ $package_dir: dist directory exists"
          else
            echo "⚠️ $package_dir: dist directory missing, attempting individual build..."
            if [ -d "$package_dir" ]; then
              cd "$package_dir"
              
              # 依存関係の確認
              pnpm install --frozen-lockfile 2>/dev/null || true
              
              # TypeScript設定の修正
              if [ -f "tsconfig.json" ] && ! grep -q '"moduleResolution"' tsconfig.json; then
                if grep -q '"isolatedModules": true[^,]' tsconfig.json; then
                  sed -i 's/"isolatedModules": true/"isolatedModules": true,/' tsconfig.json
                fi
                sed -i '/\"isolatedModules\": true,/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
              fi
              
              # ビルド実行
              if command -v npx &> /dev/null; then
                npx tsup --no-dts 2>/dev/null || pnpm build 2>/dev/null || echo "❌ Failed to build $package_dir"
              else
                pnpm build 2>/dev/null || echo "❌ Failed to build $package_dir"
              fi
              
              cd /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n
            else
              echo "❌ Package directory $package_dir not found"
            fi
          fi
        done

    - name: Build editor-ui with enhanced error handling
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🏗️ Building editor-ui with enhanced error handling..."
        cd ${{ steps.editorui_dir.outputs.dir }}
        
        # 依存関係の最終確認
        echo "📦 Final dependency verification for editor-ui..."
        pnpm install --frozen-lockfile
        
        echo "🔧 Building editor-ui..."
        if ! pnpm build; then
          echo "⚠️ Initial build failed, trying with error recovery..."
          
          # TypeScript設定の最終確認
          if [ -f "tsconfig.json" ] && ! grep -q '"moduleResolution"' tsconfig.json; then
            echo "📝 Adding final TypeScript fixes..."
            sed -i '/\"compilerOptions\": {/a\\t\t\"moduleResolution\": \"bundler\",' tsconfig.json
          fi
          
          # 再試行
          echo "🔄 Retrying editor-ui build..."
          pnpm build || {
            echo "❌ Editor-ui build failed after retry"
            exit 1
          }
        fi
        
        # ビルド成果物の確認
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          echo "✅ Editor-ui build completed successfully"
          echo "📁 Dist directory contents:"
          ls -la dist/ | head -10
        else
          echo "❌ Editor-ui build failed - dist directory is empty or missing"
          exit 1
        fi

    - name: Package build artifacts
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "📦 Packaging build artifacts..."
        tar -czvf editor-ui.tar.gz dist
        echo "✅ Build artifacts packaged successfully"
      working-directory: ${{ steps.editorui_dir.outputs.dir }}

    - name: Copy dist to project directory
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "📁 Copying dist to project directory..."
        cp -r ${{ steps.editorui_dir.outputs.dir }}/dist /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/editor-ui-dist
        echo "✅ Dist copied to project directory"

    - name: Update docker-compose.yml version
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "📝 Updating docker-compose.yml version..."
        RAW_TAG="${{ steps.latest_release.outputs.latest }}"
        VERSION="${RAW_TAG#n8n@}"  # プレフィックス n8n@ を削除
        echo "🔄 Replacing {version} with $VERSION in docker-compose.yml"
        sed -i "s/{version}/$VERSION/g" /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese/docker-compose.yml
        echo "✅ Docker-compose.yml updated successfully"

    - name: Create Git tag and push changes
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🏷️ Creating Git tag and pushing changes..."
        TAG="${{ steps.latest_release.outputs.latest }}"
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add editor-ui-dist
        git add docker-compose.yml
        git commit -m "chore: add built editor-ui dist for ${{ steps.latest_release.outputs.latest }}"
        git tag $TAG
        git push origin $TAG
        echo "✅ Tag $TAG pushed successfully"
      working-directory: /home/runner/work/n8n-i18n-japanese/n8n-i18n-japanese/n8n-i18n-japanese

    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false'
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.latest_release.outputs.latest }}
        name: Release editor-ui (ja) to ${{ steps.latest_release.outputs.latest }}
        body: |
          自動公開される日本語の言語パックバージョンです。 (Automated release of Japanese language pack.)
          
          ## 変更内容 / Changes
          - n8n ${{ steps.latest_release.outputs.latest }} に対応した日本語化editor-ui
          - Japanese localized editor-ui for n8n ${{ steps.latest_release.outputs.latest }}
          - Vite 6.x互換性対応
          - Enhanced dependency resolution and build process
          
          ## インストール方法 / Installation
          以下のディレクトリに `editor-ui.tar.gz` を解凍してください:
          Extract `editor-ui.tar.gz` to: `/usr/local/lib/node_modules/n8n/node_modules/n8n-editor-ui/`
        draft: false
        prerelease: false
        files: ${{ steps.editorui_dir.outputs.dir }}/editor-ui.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build completion summary
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "🎉 Build completed successfully!"
        echo "📋 Summary:"
        echo "  - Version: ${{ steps.latest_release.outputs.latest }}"
        echo "  - Node.js Version: $(node --version)"
        echo "  - pnpm Version: $(pnpm --version)"
        echo "  - Editor-UI Structure: ${{ steps.editorui_dir.outputs.flag }}"
        echo "  - Build Artifacts: editor-ui.tar.gz"
        echo "  - GitHub Release: Created"
        echo "  - Vite 6.x Compatibility: Applied"
        echo "  - Enhanced Dependency Resolution: Completed"
        echo ""
        echo "📖 Installation Instructions:"
        echo "  Extract editor-ui.tar.gz in: /usr/local/lib/node_modules/n8n/node_modules/n8n-editor-ui/"
        echo ""
        echo "🔧 Technical Improvements Applied:"
        echo "  - n8n-workflow package pre-build"
        echo "  - Correct @n8n/* package build order"
        echo "  - Comprehensive TypeScript moduleResolution fixes"
        echo "  - Workspace-wide dependency resolution"
        echo "  - Enhanced error handling and retry mechanisms"
